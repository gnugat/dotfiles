# File: /3f-tmux/config/tmux.conf
# ──────────────────────────────────────────────────────────────────────────────
# 👕 tmux
#
# * `set-option` (`set`): applies setting at the session level
# * `set-window-option` (`setw`): applies settings at window level
# * `bind-key` (`bind`)
# * `unbind-key` (`unbind`)
# ──────────────────────────────────────────────────────────────────────────────

## ─────────────────────────────────────────────────────────────────────────────
## General
## ─────────────────────────────────────────────────────────────────────────────

## Binds `Ctrl`+`Space` to "prefix" aka "Leader" (instead of `Ctrl`+`b`)
unbind-key C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix

## Binds `r` to reload config (`tmux source-file ~/.config/tmux/tmux.conf`).
unbind-key r
bind-key r source-file ~/.config/tmux/tmux.conf

## Enables mouse support (eg resizing, selecting, scrolling, etc)
set-option -g mouse on

## Sets index for windows and panes to start from 1 (instead of 0)
set-option -g base-index 1
set-option -g pane-base-index 1
set-option -g renumber-windows on

## Sets new windows/panes in the current's pane CWD (instead of $HOME)
bind-key '"' split-window -v -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key c new-window -c "#{pane_current_path}"

## ─────────────────────────────────────────────────────────────────────────────
## ✏️ Vim-like behaviour
## ─────────────────────────────────────────────────────────────────────────────

## Enables "vi keybindings" for "copy mode" (instead of emacs keybindings)
set-window-option -g mode-keys vi

## Enables "vi visual mode" text selection for "copy mode" (instead of `Space` and `Enter`)
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle # block selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel # yank and exit "copy mode"

## Binds `Shift`+`h/l` to window navigation (instead of `n` and `p`)
bind-key H previous-window
bind-key L next-window

## Binds `Alt`+`h/j/k/l` to pane navigation, **without prefix** (instead of emacs arrow keys)
bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R

## Binds `s` and `v` to split window (instead of `%` and `"`)
bind-key s split-window -h -c "#{pane_current_path}" # Split horizontal (left / right)
bind-key v split-window -v -c "#{pane_current_path}" # split Vertical (top / bottom)

## ─────────────────────────────────────────────────────────────────────────────
## 📋 Clipboard integration
## ─────────────────────────────────────────────────────────────────────────────

## Enables clipboard integration between tmux and vim
set-option -g set-clipboard on

### ────────────────────────────────────────────────────────────────────────────
### Enables clipboard integration between tmux and the system
### Notes:
###  * do NOT try enabling copying via `Ctrl + c`: this is reserved for killing processes
###  * Cross Platform compatibility: if Darwin then Mac OS, else Linux

### Using copying in Copy Mode via vim like `y` yanking
if-shell 'uname -s | grep -iq darwin' \
  'bind-key -T copy-mode-vi y send-keys -X copy-pipe "pbcopy"' \
  'bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -selection clipboard"'
## Using copying in Normal Mode via mouse left button selection
if-shell 'uname -s | grep -iq darwin' \
  'bind-key -T root MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"' \
  'bind-key -T root MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"'
## Using pasting in Normal Mode via `Ctrl` + `v`
if-shell 'uname -s | grep -iq darwin' \
  'bind-key -n C-v run "tmux set-buffer $(pbpaste) && tmux paste-buffer"' \
  'bind-key -n C-v run "tmux set-buffer $(xclip -selection clipboard -o) && tmux paste-buffer"'
### ────────────────────────────────────────────────────────────────────────────

## ─────────────────────────────────────────────────────────────────────────────
## 🎨 Style
## ─────────────────────────────────────────────────────────────────────────────

## Enables 256 colours
set-option -g default-terminal "tmux-256color"

## Sets status bar to the top 
set-option -g status-position top

### ────────────────────────────────────────────────────────────────────────────
### 🌈😼☕ catppuccin/tmux: sets theme for the status line.
###
### It might be necessary to restart tmux entirely to reload new styles:
### `tmux kill-server`.
###
### To set the different parts of the status bar's theme we use `set-option`:
### * `-g` (global) to apply it to all sessions
### * `-a` (append) to add to what was previously set
### * `-F` (format) to evaluate the format once when the option is set,
###    as opposed to evaluate the format each time the option is displayed
### * `-o` (omit) to skip if the option is already set
### * `-q` (quiet) to silence warning raised by `-o`
###
### Option names starting with `@` are essentially global variables,
### the catppuccin provides its colours this way (eg `@thm_rosewater`).
###
### The options to theme status line are:
### * `status-left`: usually where the session information is
### * `status-window-*`: the list of windows
###     * `status-justify`: to set where the list is displayed
###       (default: `left`, which is actually on the right of `status-left`)
### * `status-right`: usually where system stuff is (hostname, time and date)
###
### The `#[]` STYLES syntax defines a comma or space separated list of
### embedded styles.
### instructions, such as (not exhaustive list, see MANPAGE for more):
### * `bg=<colour>`: background colour
### * `fg=<colour>`: text colour
### * `reverse`: switches the `fg` and `bg` values
### * `bold` / `nobold`: sets/unsets text strong emphasis
### * `italics` / `noitalics`: sets/unsets text light emphasis
###
### The `#{}` FORMAT syntax defines a template string that accepts placeholders.
### To use the `#`, `{` and `}` characters, prefix them with `#` (eg `##`).
###
### tmux provides out of box the following, some with short aliases:
### * `host` (`#H`): hostname
### * `session_name` (`#S`)
### * `user`: server user
### * `window_flags` (`#F`): eg last active (`-`), current (`*`), etc
### * `window_index` (`#I`)
### * `window_name` (`#W`)
### There are actually way more variables listed in its MANPAGE
### (lookup `Variable name`).
###
### Inside the FORMAT block, the following may be done:
### * _conditional testing_ (does variable exist, and is it non `0`) using`?`:
###   `#{?<condition>, <if_true>, <if_false>}`
###     * evaluates to true is `<condition>` returns `1`,  for false for `0`
###       ("returns" -- means the whole `<condition>` block gets replaced)
###     * _logical_ operators may be used as a condition:
###         * condition block syntax: `#{<operator>: <left>, <right>}`
###           (note the colon `:` after `<operator>`)
###         * operators: `||`, `&&`
###     * _string_ comparison may be done in a `strcmp()` way:
###         * condition block syntax: `#{<operator>: <left>, <right>}`
###           (note the colon `:` after `<operator>`)
###         * operators: `==`, `!=`, `<`, `>`, `<=`, `>=`
###     * _pattern matching_ may be done:
###         * condition bock syntax: `#{<operator>: <pattern>, <subject>}`
###           (note the colon `:` after `<operator>`)
###         * operators:
###             * `m`: Unix filename pattern matching (`fnmatch(3)`),
###               supports shell style wildcards (`*`, `?`, `[<seq>]` and `!`)
###             * `C`: same as `m`, but:
###                 * no `<subject> argument, it searches in the pane content
###                 * evaluates to `0` if not found, `<line_number>` if found
###             * adding `/` specifies one or more optional flags:
###                 * `r`: use regular expression pattern instead of `fnmatch`
###                 * `i`: case insensitive
###     * _numeric_ operations may be done:
###         * condition bock syntax: `#{e|<operator>: <left>, <right>}`
###           (note the `e|` before `<operator>` and the colon `:` after it)
###         * operators:
###             * computations: `+`, `-`, `*`, `/`, `m` (modulus)
###             * comparisons: `==`, `!=`, `<`, `>`, `<=`, `>=`
###             * follow with `|f` to use floating point instead of integers
###               (follow with `|<number>` to specify number of decimals)
### * _ASCII_ operations may be done:
###     * condition bock syntax: `#{a: <numeric_value>}`
###       (the block gets replaced with string ASCII equivalent)
### * _colours_ operations may be done:
###     * condition bock syntax: `#{c: <name>}`
###       (the block gets replaced with the 6 digit hexadecimal RGB value)
### * _truncating_ to limit the length of a string may be done:
###     * truncate syntax: `#{=<max_length>: <string>}`
###       (note the equal `=` before `<operator>` and the colon `:` after it)
###     * positive numbers count from the start, negative from the end
###     * using `#{=/<max_length>/<ellipsis>/:<string>}`
###       will prepend/append a prefix/suffix, but only if truncation occured
### * _padding_ a string may be done:
###     * padding syntax: `#{p<width>: <string>}`
###       (note the `p` before `<width>` and the colon `:` after it)
###       (eg `#{=/1/…: hi}`)
###     * positive number pads on the left, negative on the right
### * ??? `n` expands to the length of a string `#{n:<string>}`,
###   `w` expands to its width. No idea what that means.
### * _timestamp formating_ may be done:
###     * formating syntax: `#{t:<timestamp>}`
###       (note the `t:` before `<timestamp>`)
###       (eg `#{t:window_activity}`, with `window_activity` set to `1445765102`
###       will be replaced with 'Sun Oct 25 09:25:02 2015')
###     * using `#{t/f/<strftime_format>:<timestamp>}`
###       will format the timestamp as specified by `strftime(3)`
###       (`%` needs to be escaped like so: `%%`)
### * _path formating_ may be done:
###     * basename(3) formating syntax: `#{b:<path>}`
###       (note the `b:` before `<path>`)
###     * dirname(3) formating syntax: `#{d:<path>}`
###       (note the `d:` before `<path>`)
###
### We try to stick to the following Styling Convention for Catppuccin:
### * terminal background: base (`bg`)
### * status line background:
###     * foreground: subtext 1
###     * background: mantle
### * primary module (eg current session / window):
###     * foreground: mauve
###     * background: surface 2
### * secondary module (eg last window):
###     * foreground: blue
###     * background: surface 1
### * tertiary module (eg other windows):
###     * foreground: subtext 0
###     * background: surface 0
### * username: green
### * path: blue
### * git: yellow
### Note: `text` and `base` are called respectively `fg` and `bg` in the plugin.
### ────────────────────────────────────────────────────────────────────────────

### Choose flavour: latte, frappe, macchiato or mocha
set-option -g @catppuccin_flavor 'macchiato'

### Make status side wider (default 50 characters)
set-option -g status-right-length 100
set-option -g status-left-length 100

### Catppuccin recommends loading this theme plugin manually (not via TPM).
### This sets the `@thm_*` variables, so needs to be executed before using them.
run '~/.config/tmux/plugins/tmux/catppuccin.tmux'

#### ───────────────────────────────────────────────────────────────────────────
#### Left: tmux session information.
#### By convention, session name is inside square brackets.
#### ───────────────────────────────────────────────────────────────────────────

#### Reset status left bar, so we can add our Super Secret stuff!
set-option -g status-left ""

#### Display Leftmost Edge (colours are reversed)
set-option -agF status-left "#[fg=#{@thm_mantle}, bg=#{@thm_bg}]"
set-option -agF status-left "" # Thick left half circle (\ue0b6) 

#### Display Session Icon
set-option -agF status-left "#[fg=#{@thm_subtext_1}, bg=#{@thm_mantle}]"
set-option -agF status-left " " # tmux icon (\uebc8)
#### Display Session "Index" (remove `$` from Session ID and increment it by 1)
set-option -ag status-left "#{e|+: 1, #{s/\\$//;:session_id}}"
#### Display Number of Sessions
set-option -ag status-left "/#{server_sessions}" 
#### Display Session name, truncated if longer than 15 characters
set-option -ag status-left "[#{=/15/…/:session_name}] "

#### ───────────────────────────────────────────────────────────────────────────
#### Central Window List.
#### By convention: `<window_index>:<window_name><flag>`, with flag being:
#### + `*`: current window
#### + `-`: last active window
#### ───────────────────────────────────────────────────────────────────────────

#### Current window
set-option -gF window-status-current-style "fg=#{@thm_mauve}, bg=#{@thm_surface_2}"
set-option -g window-status-current-format " #{window_index}:#{window_name}"
set-option -ag window-status-current-format "#{window_flags} "

#### Last active window
set-option -gF window-status-last-style "fg=#{@thm_blue},bg=#{@thm_surface_1}"

#### Other windows
set-option -gF window-status-style "fg=#{@thm_subtext_0}, bg=#{@thm_surface_0}"
set-option -g window-status-format " #{window_index}:#{window_name}#{window_flags} "

#### ───────────────────────────────────────────────────────────────────────────
#### Right: system
#### ───────────────────────────────────────────────────────────────────────────

#### Reset status left bar, so we can add our Super Secret stuff!
set-option -g status-right ""

set-option -agF status-right "#[fg=#{@thm_green}, bg=#{@thm_mantle}]"

#### Display Username, truncated if longer than 15 characters 
set-option -agF status-right " " # User icon (\uf007)
set-option -ag status-right "#{=/15/…/: #{user}}"

## Display Rightmose Edge (colours are reversed)
set-option -agF status-right "#[fg=#{@thm_mantle},bg=#{@thm_bg}]"
set-option -agF status-right "" # thick right half circle (\ue0b4)

# Run TPM after catppuccin/tmux, its plugins may replace status line text

## ─────────────────────────────────────────────────────────────────────────────
## 🔌 TPM: TMUX Plugin Manager
##
## To install a new plugin:
## * add a line in List of plugins
## * either:
##  * press `<prefix>` + `Shift` + `i`
##  * run `~/.config/tmux/plugins/tpm/bin/install_plugins`
##
## Plugins used:
## * tmux-sensible: sensible settings, do not override user defined settings.
## * tmux-sessionist: better session creation, deletion and switching.
## * catppuccin/tmux: the purr-fectly caffeinated theme, for the status line.
## ─────────────────────────────────────────────────────────────────────────────

setenv -g TMUX_PLUGIN_MANAGER_PATH "~/.config/tmux/plugins/"

## List of plugins (yes, TPM is a plugin)
set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-sensible'
set-option -g @plugin 'tmux-plugins/tmux-sessionist'
# catppuccin/tmux plugin needs to be loaded manually
# set-option -g @plugin 'catppuccin/tmux'

### ────────────────────────────────────────────────────────────────────────────
### Initialize TPM (MUST be the last line of `tmux.conf`)
### ────────────────────────────────────────────────────────────────────────────

run '~/.config/tmux/plugins/tpm/tpm'
